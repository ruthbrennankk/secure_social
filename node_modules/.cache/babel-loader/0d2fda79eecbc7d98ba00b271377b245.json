{"ast":null,"code":"var _jsxFileName = \"/Users/ruthbrennan/Documents/advanced_telecoms/secure_social/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css'; //  Used to store posts, user info etc and to authenticate user login with google accounts\n//  https://firebase.google.com/\n\nimport firebase, { auth, provider } from './firebase.js'; //  Library used to encrypt posts\n//  https://www.npmjs.com/package/crypto-js\n\nvar Crypto = require(\"crypto\");\n\nvar CryptoJS = require(\"crypto-js\");\n\nclass App extends Component {\n  constructor() {\n    super(); //state holds all global variables whose change should call for a refresh\n\n    this.state = {\n      currentItem: '',\n      username: '',\n      user: null,\n      items: [],\n      homepage: true,\n      groupName: '',\n      memberToGroup: '',\n      memberName: '',\n      groups: [],\n      postToGroup: ''\n    }; //binding all the methods to this\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAddGroup = this.handleAddGroup.bind(this);\n    this.handleAddToGroup = this.handleAddToGroup.bind(this);\n    this.switchPage = this.switchPage.bind(this);\n    this.text = this.text.bind(this);\n    this.decrypt = this.decrypt.bind(this);\n  } //Method that uses auth from google firebase to log people in with their gmail\n\n\n  login() {\n    auth.signInWithPopup(provider).then(result => {\n      const user = result.user;\n      this.setState({\n        user\n      });\n    });\n  } //Method that uses auth from google firebase to log people out\n\n\n  logout() {\n    auth.signOut().then(() => {\n      this.setState({\n        user: null\n      });\n    });\n  } //Method to handle posting\n  // *** Encryption is done here ***\n\n\n  handleSubmit(e) {\n    //we need to prevent the default behavior of the form, \n    //which if we don’t will cause the page to refresh when you hit the submit button\n    e.preventDefault(); //We need to carve out a space in our Firebase database where we’d like to store all of the posts. \n    //We do this by calling the ref method and passing in the destination we’d like them to be stored (items).\n\n    const itemsRef = firebase.database().ref('items'); //  *** Encryption ***\n    // Here we generate a random key using today's date and a random string\n    // The Cyrpto library allows us to user SHA1 to generate a hash that we use as the key\n\n    var current_date = new Date().valueOf().toString();\n    var random = Math.random().toString();\n    var key = Crypto.createHash('sha1').update(current_date + random).digest('hex').toString(); // Here we encrypt the post using AES which the Crypto Library provides\n    // AES is plain text encryption\n\n    var encryptedPost = CryptoJS.AES.encrypt(this.state.currentItem, key).toString();\n    console.log('encrypt: ');\n    console.log(encryptedPost); //  Make item object to represent the post\n    //  The CipherText is stored, as is the group to which it is posted, the user who posted it and the key to decrypt it\n\n    const item = {\n      title: encryptedPost,\n      group: this.state.postToGroup,\n      user: this.state.user.displayName,\n      key: key\n    }; //  Here we add the new item to the items on the firebase as well and reset the state values used to create this new item\n    //  The local items will be updated in components did mount\n\n    itemsRef.push(item);\n    this.setState({\n      currentItem: '',\n      postToGroup: ''\n    });\n  } //  *** Decryption ***\n  //  This is the function where decrytion is preformed\n\n\n  decrypt(cipherText, key) {\n    var originalText = CryptoJS.AES.decrypt(cipherText, key).toString(CryptoJS.enc.Utf8);\n    return originalText;\n  } //  This function checks if the current user is able to view the post as cipher text or not\n\n\n  text(item) {\n    //Getting Groups from db\n    let decrypt = false; // This boolean tells us to decrypt or not\n\n    const groupRef = firebase.database().ref('groups');\n    groupRef.on('value', snapshot => {\n      let tempGroups = snapshot.val();\n\n      for (let group in tempGroups) {\n        if (tempGroups[group].name == item.group) {\n          if (tempGroups[group].members.includes(this.state.user.displayName)) {\n            decrypt = true;\n          }\n        }\n      }\n    });\n\n    if (decrypt) {\n      var hold = this.decrypt(item.title, item.key);\n      console.log('hold ' + hold);\n      return hold;\n    } else {\n      console.log('item.title ' + item.title);\n      return item.title;\n    }\n  } //  This function handles adding a new group\n  //  This is very similar to handle submit as this is also called from a form \n  //  The differenece here is that we add a group as opposed to a post\n\n\n  handleAddGroup(e) {\n    e.preventDefault();\n    const groupsRef = firebase.database().ref('groups');\n    var memberList = [this.state.user.displayName];\n    const group = {\n      name: this.state.groupName,\n      members: memberList,\n      admin: this.state.user.displayName\n    };\n    groupsRef.push(group);\n    this.setState({\n      groupName: ''\n    });\n  } //  This function handles adding a new member to a group\n  //  This is very similar to handle submit as this is also called from a form \n  //  The differenece here is that we add a member to a group \n\n\n  handleAddToGroup(e) {\n    e.preventDefault();\n    let newGroups = ''; //  Getting Groups from db\n\n    const groupRef = firebase.database().ref('groups');\n    groupRef.on('value', snapshot => {\n      newGroups = snapshot.val();\n\n      for (let group in newGroups) {\n        console.log(newGroups[group].name); //  We find the group that we want to add to\n\n        if (newGroups[group].name == this.state.memberToGroup) {\n          //  We add the member to our local temporary group\n          newGroups[group].members.push(this.state.memberName);\n        }\n      }\n    }); //  Here we set as opposed to post\n\n    groupRef.set(newGroups);\n    this.setState({\n      memberToGroup: '',\n      memberName: ''\n    });\n  } // This is a simple multipurpose function that sets a value in the state based on where it was called from\n\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  } //  We’ll attach this event listener inside of our componentDidMount\n\n\n  componentDidMount() {\n    //  Login stuff\n    auth.onAuthStateChanged(user => {\n      if (user) {\n        this.setState({\n          user\n        });\n      }\n    }); //  Getting items (posts) from db\n\n    const itemsRef = firebase.database().ref('items');\n    itemsRef.on('value', snapshot => {\n      let items = snapshot.val();\n      let newState = [];\n\n      for (let item in items) {\n        newState.push({\n          id: item,\n          title: items[item].title,\n          user: items[item].user,\n          group: items[item].group,\n          key: items[item].key\n        });\n      }\n\n      this.setState({\n        items: newState\n      });\n    }); //  Getting Groups from db\n\n    const groupRef = firebase.database().ref('groups');\n    groupRef.on('value', snapshot => {\n      let groups = snapshot.val();\n      let newState = [];\n\n      for (let group in groups) {\n        newState.push({\n          id: group,\n          name: groups[group].name,\n          members: groups[group].members,\n          admin: groups[group].admin\n        });\n      }\n\n      this.setState({\n        groups: newState\n      });\n    });\n  } //  Function to remove a post\n\n\n  removeItem(itemId) {\n    const itemRef = firebase.database().ref(`/items/${itemId}`);\n    itemRef.remove();\n  }\n\n  removeGroup() {} //TODO\n  //   Remove a member from a group\n  //   This can only be done by a group admin\n\n\n  handleRemoveMember(memberName, groupName) {\n    let newGroups = ''; //  Getting Groups from db\n\n    const groupRef = firebase.database().ref('groups');\n    groupRef.on('value', snapshot => {\n      newGroups = snapshot.val();\n\n      for (let group in newGroups) {\n        console.log(newGroups[group].name);\n\n        if (newGroups[group].name == groupName) {\n          if (newGroups[group].admin != memberName) {\n            var index = newGroups[group].members.indexOf(memberName);\n            newGroups[group].members.splice(index, 1);\n          }\n        }\n      }\n    });\n    groupRef.set(newGroups);\n    this.setState({\n      memberToGroup: '',\n      memberName: ''\n    });\n  } //  This just changes our global variable so that we can switch between \n  //  the homepage (for posting) and the groups page (to manage groups)\n\n\n  switchPage() {\n    let temp = !this.state.homepage;\n    this.setState({\n      homepage: temp\n    });\n  } //  This is the render that actually puts things on the screen \n\n\n  render() {\n    return (\n      /*#__PURE__*/\n      //  This is the header part\n      //  So our banner, 'logo', logout and switch page buttons\n      React.createElement(\"div\", {\n        className: \"app\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"header\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }\n      }, \"Social App\"), this.state.homepage ? /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.switchPage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 15\n        }\n      }, \"Groups\") : /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.switchPage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 15\n        }\n      }, \"Homepage\"), this.state.user ? /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.logout,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 15\n        }\n      }, \"Logout\") : /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.login,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 15\n        }\n      }, \"Log In\"))), this.state.user ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }\n      }, this.state.homepage ?\n      /*#__PURE__*/\n      // Here we are on the homepage\n      React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"user-profile\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: this.state.user.photoURL,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"section\", {\n        className: \"add-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"postToGroup\",\n        placeholder: \"What group do you want to post to?\",\n        onChange: this.handleChange,\n        value: this.state.postToGroup,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"currentItem\",\n        placeholder: \"What's on your mind\",\n        onChange: this.handleChange,\n        value: this.state.currentItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 23\n        }\n      }, \"Post\"))), /*#__PURE__*/React.createElement(\"section\", {\n        className: \"display-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 23\n        }\n      }, this.state.items.map(item => {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: item.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 31\n          }\n        }, this.text(item)), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 31\n          }\n        }, \"posted by: \", item.user), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 31\n          }\n        }, \" into group: \", item.group, item.user === this.state.user.displayName || item.user === this.state.user.email ? /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => this.removeItem(item.id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 35\n          }\n        }, \"Remove Post\") : null));\n      })))))) :\n      /*#__PURE__*/\n      //We are on the group page\n      React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"user-profile\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: this.state.user.photoURL,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"section\", {\n        className: \"add-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.handleAddGroup,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"groupName\",\n        placeholder: \"What's your new group's name?\",\n        onChange: this.handleChange,\n        value: this.state.groupName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 23\n        }\n      }, \"Add Group\")), /*#__PURE__*/React.createElement(\"section\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 23\n        }\n      })), /*#__PURE__*/React.createElement(\"section\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 23\n        }\n      })), /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.handleAddToGroup,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"memberToGroup\",\n        placeholder: \"What group do you want to add to?\",\n        onChange: this.handleChange,\n        value: this.state.memberToGroup,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"memberName\",\n        placeholder: \"What's your new members name?\",\n        onChange: this.handleChange,\n        value: this.state.memberName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 23\n        }\n      }, \"Add To Group\"))), /*#__PURE__*/React.createElement(\"section\", {\n        className: \"display-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 23\n        }\n      }, this.state.groups.map(item => {\n        if (item.members.includes(this.state.user.displayName)) {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            key: item.id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 31\n            }\n          }, /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 33\n            }\n          }, item.name), /*#__PURE__*/React.createElement(\"h3\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 33\n            }\n          }, \"Admin = \", item.admin), item.members.map(member => {\n            if (this.state.user.displayName == item.admin) {\n              return /*#__PURE__*/React.createElement(\"div\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 41\n                }\n              }, /*#__PURE__*/React.createElement(\"p\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 43\n                }\n              }, member, /*#__PURE__*/React.createElement(\"button\", {\n                onClick: () => this.handleRemoveMember(member, item.name),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 412,\n                  columnNumber: 47\n                }\n              }, \"Remove\")));\n            } else {\n              return /*#__PURE__*/React.createElement(\"div\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 418,\n                  columnNumber: 41\n                }\n              }, /*#__PURE__*/React.createElement(\"p\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 43\n                }\n              }, member));\n            }\n          }));\n        }\n      }))))))) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 13\n        }\n      }, \"You must be logged in.\")))\n    );\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ruthbrennan/Documents/advanced_telecoms/secure_social/src/App.js"],"names":["React","Component","firebase","auth","provider","Crypto","require","CryptoJS","App","constructor","state","currentItem","username","user","items","homepage","groupName","memberToGroup","memberName","groups","postToGroup","handleChange","bind","handleSubmit","login","logout","handleAddGroup","handleAddToGroup","switchPage","text","decrypt","signInWithPopup","then","result","setState","signOut","e","preventDefault","itemsRef","database","ref","current_date","Date","valueOf","toString","random","Math","key","createHash","update","digest","encryptedPost","AES","encrypt","console","log","item","title","group","displayName","push","cipherText","originalText","enc","Utf8","groupRef","on","snapshot","tempGroups","val","name","members","includes","hold","groupsRef","memberList","admin","newGroups","set","target","value","componentDidMount","onAuthStateChanged","newState","id","removeItem","itemId","itemRef","remove","removeGroup","handleRemoveMember","index","indexOf","splice","temp","render","photoURL","map","email","member"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP,C,CAEA;AACA;;AACA,OAAOC,QAAP,IAAmBC,IAAnB,EAAyBC,QAAzB,QAAyC,eAAzC,C,CAEA;AACA;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AAGA,MAAME,GAAN,SAAkBP,SAAlB,CAA4B;AAE1BQ,EAAAA,WAAW,GAAG;AAEZ,YAFY,CAIZ;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,EADF;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXC,MAAAA,IAAI,EAAE,IAHK;AAIXC,MAAAA,KAAK,EAAC,EAJK;AAKXC,MAAAA,QAAQ,EAAE,IALC;AAMXC,MAAAA,SAAS,EAAE,EANA;AAOXC,MAAAA,aAAa,EAAE,EAPJ;AAQXC,MAAAA,UAAU,EAAE,EARD;AASXC,MAAAA,MAAM,EAAE,EATG;AAUXC,MAAAA,WAAW,EAAE;AAVF,KAAb,CALY,CAkBZ;;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKE,KAAL,GAAa,KAAKA,KAAL,CAAWF,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKG,MAAL,GAAc,KAAKA,MAAL,CAAYH,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKI,cAAL,GAAsB,KAAKA,cAAL,CAAoBJ,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKK,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBL,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKM,UAAL,GAAkB,KAAKA,UAAL,CAAgBN,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKO,IAAL,GAAY,KAAKA,IAAL,CAAUP,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKQ,OAAL,GAAe,KAAKA,OAAL,CAAaR,IAAb,CAAkB,IAAlB,CAAf;AACD,GA9ByB,CAgC1B;;;AACAE,EAAAA,KAAK,GAAG;AACNrB,IAAAA,IAAI,CAAC4B,eAAL,CAAqB3B,QAArB,EACG4B,IADH,CACSC,MAAD,IAAY;AAChB,YAAMpB,IAAI,GAAGoB,MAAM,CAACpB,IAApB;AACA,WAAKqB,QAAL,CAAc;AACZrB,QAAAA;AADY,OAAd;AAGD,KANH;AAOD,GAzCyB,CA2C1B;;;AACAY,EAAAA,MAAM,GAAG;AACPtB,IAAAA,IAAI,CAACgC,OAAL,GACGH,IADH,CACQ,MAAM;AACV,WAAKE,QAAL,CAAc;AACZrB,QAAAA,IAAI,EAAE;AADM,OAAd;AAGD,KALH;AAMD,GAnDyB,CAqD1B;AACA;;;AACAU,EAAAA,YAAY,CAACa,CAAD,EAAI;AAEZ;AACA;AACAA,IAAAA,CAAC,CAACC,cAAF,GAJY,CAMZ;AACA;;AACA,UAAMC,QAAQ,GAAGpC,QAAQ,CAACqC,QAAT,GAAoBC,GAApB,CAAwB,OAAxB,CAAjB,CARY,CAUZ;AACA;AACA;;AACA,QAAIC,YAAY,GAAI,IAAIC,IAAJ,EAAD,CAAaC,OAAb,GAAuBC,QAAvB,EAAnB;AACA,QAAIC,MAAM,GAAGC,IAAI,CAACD,MAAL,GAAcD,QAAd,EAAb;AACA,QAAIG,GAAG,GAAG1C,MAAM,CAAC2C,UAAP,CAAkB,MAAlB,EAA0BC,MAA1B,CAAiCR,YAAY,GAAGI,MAAhD,EAAwDK,MAAxD,CAA+D,KAA/D,EAAsEN,QAAtE,EAAV,CAfY,CAiBZ;AACA;;AACA,QAAIO,aAAa,GAAG5C,QAAQ,CAAC6C,GAAT,CAAaC,OAAb,CAAqB,KAAK3C,KAAL,CAAWC,WAAhC,EAA6CoC,GAA7C,EAAkDH,QAAlD,EAApB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ,EArBY,CAuBZ;AACA;;AACA,UAAMK,IAAI,GAAG;AACXC,MAAAA,KAAK,EAAEN,aADI;AAEXO,MAAAA,KAAK,EAAE,KAAKhD,KAAL,CAAWU,WAFP;AAGXP,MAAAA,IAAI,EAAG,KAAKH,KAAL,CAAWG,IAAX,CAAgB8C,WAHZ;AAIXZ,MAAAA,GAAG,EAAEA;AAJM,KAAb,CAzBY,CAgCZ;AACA;;AACAT,IAAAA,QAAQ,CAACsB,IAAT,CAAcJ,IAAd;AACA,SAAKtB,QAAL,CAAc;AACZvB,MAAAA,WAAW,EAAE,EADD;AAEZS,MAAAA,WAAW,EAAE;AAFD,KAAd;AAIH,GA9FyB,CAgGzB;AACD;;;AACAU,EAAAA,OAAO,CAAC+B,UAAD,EAAad,GAAb,EAAkB;AACvB,QAAIe,YAAY,GAAGvD,QAAQ,CAAC6C,GAAT,CAAatB,OAAb,CAAqB+B,UAArB,EAAiCd,GAAjC,EAAsCH,QAAtC,CAA+CrC,QAAQ,CAACwD,GAAT,CAAaC,IAA5D,CAAnB;AACA,WAAOF,YAAP;AACD,GArGyB,CAuG1B;;;AACAjC,EAAAA,IAAI,CAAC2B,IAAD,EAAO;AAET;AACA,QAAI1B,OAAO,GAAG,KAAd,CAHS,CAGa;;AACtB,UAAMmC,QAAQ,GAAG/D,QAAQ,CAACqC,QAAT,GAAoBC,GAApB,CAAwB,QAAxB,CAAjB;AACAyB,IAAAA,QAAQ,CAACC,EAAT,CAAY,OAAZ,EAAsBC,QAAD,IAAc;AACjC,UAAIC,UAAU,GAAGD,QAAQ,CAACE,GAAT,EAAjB;;AACA,WAAK,IAAIX,KAAT,IAAkBU,UAAlB,EAA8B;AAC5B,YAAIA,UAAU,CAACV,KAAD,CAAV,CAAkBY,IAAlB,IAA0Bd,IAAI,CAACE,KAAnC,EAA0C;AACxC,cAAIU,UAAU,CAACV,KAAD,CAAV,CAAkBa,OAAlB,CAA0BC,QAA1B,CAAmC,KAAK9D,KAAL,CAAWG,IAAX,CAAgB8C,WAAnD,CAAJ,EAAqE;AACnE7B,YAAAA,OAAO,GAAC,IAAR;AACD;AACF;AACF;AACF,KATD;;AAWA,QAAIA,OAAJ,EAAa;AACX,UAAI2C,IAAI,GAAG,KAAK3C,OAAL,CAAa0B,IAAI,CAACC,KAAlB,EAAwBD,IAAI,CAACT,GAA7B,CAAX;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAUkB,IAAtB;AACA,aAAQA,IAAR;AACD,KAJD,MAIO;AACLnB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBC,IAAI,CAACC,KAAjC;AACA,aAAOD,IAAI,CAACC,KAAZ;AACD;AACF,GAhIyB,CAkI1B;AACA;AACA;;;AACA/B,EAAAA,cAAc,CAACU,CAAD,EAAI;AAEhBA,IAAAA,CAAC,CAACC,cAAF;AAEA,UAAMqC,SAAS,GAAGxE,QAAQ,CAACqC,QAAT,GAAoBC,GAApB,CAAwB,QAAxB,CAAlB;AAEA,QAAImC,UAAU,GAAG,CAAC,KAAKjE,KAAL,CAAWG,IAAX,CAAgB8C,WAAjB,CAAjB;AAEA,UAAMD,KAAK,GAAG;AACZY,MAAAA,IAAI,EAAE,KAAK5D,KAAL,CAAWM,SADL;AAEZuD,MAAAA,OAAO,EAAEI,UAFG;AAGZC,MAAAA,KAAK,EAAE,KAAKlE,KAAL,CAAWG,IAAX,CAAgB8C;AAHX,KAAd;AAMAe,IAAAA,SAAS,CAACd,IAAV,CAAeF,KAAf;AACA,SAAKxB,QAAL,CAAc;AACZlB,MAAAA,SAAS,EAAE;AADC,KAAd;AAID,GAxJyB,CA0J1B;AACA;AACA;;;AACAW,EAAAA,gBAAgB,CAACS,CAAD,EAAI;AAElBA,IAAAA,CAAC,CAACC,cAAF;AAEA,QAAIwC,SAAS,GAAG,EAAhB,CAJkB,CAKlB;;AACA,UAAMZ,QAAQ,GAAG/D,QAAQ,CAACqC,QAAT,GAAoBC,GAApB,CAAwB,QAAxB,CAAjB;AACAyB,IAAAA,QAAQ,CAACC,EAAT,CAAY,OAAZ,EAAsBC,QAAD,IAAc;AACjCU,MAAAA,SAAS,GAAGV,QAAQ,CAACE,GAAT,EAAZ;;AACA,WAAK,IAAIX,KAAT,IAAkBmB,SAAlB,EAA6B;AAC3BvB,QAAAA,OAAO,CAACC,GAAR,CAAYsB,SAAS,CAACnB,KAAD,CAAT,CAAiBY,IAA7B,EAD2B,CAE3B;;AACA,YAAIO,SAAS,CAACnB,KAAD,CAAT,CAAiBY,IAAjB,IAAyB,KAAK5D,KAAL,CAAWO,aAAxC,EAAuD;AACrD;AACA4D,UAAAA,SAAS,CAACnB,KAAD,CAAT,CAAiBa,OAAjB,CAAyBX,IAAzB,CAA8B,KAAKlD,KAAL,CAAWQ,UAAzC;AACD;AACF;AACF,KAVD,EAPkB,CAmBlB;;AACA+C,IAAAA,QAAQ,CAACa,GAAT,CAAaD,SAAb;AAEA,SAAK3C,QAAL,CAAc;AACZjB,MAAAA,aAAa,EAAE,EADH;AAEZC,MAAAA,UAAU,EAAE;AAFA,KAAd;AAKD,GAxLyB,CA0L1B;;;AACAG,EAAAA,YAAY,CAACe,CAAD,EAAI;AACZ,SAAKF,QAAL,CAAc;AACZ,OAACE,CAAC,CAAC2C,MAAF,CAAST,IAAV,GAAiBlC,CAAC,CAAC2C,MAAF,CAASC;AADd,KAAd;AAGH,GA/LyB,CAkM1B;;;AACAC,EAAAA,iBAAiB,GAAG;AAElB;AACA9E,IAAAA,IAAI,CAAC+E,kBAAL,CAAyBrE,IAAD,IAAU;AAChC,UAAIA,IAAJ,EAAU;AACR,aAAKqB,QAAL,CAAc;AAAErB,UAAAA;AAAF,SAAd;AACD;AACF,KAJD,EAHkB,CAQlB;;AACA,UAAMyB,QAAQ,GAAGpC,QAAQ,CAACqC,QAAT,GAAoBC,GAApB,CAAwB,OAAxB,CAAjB;AACAF,IAAAA,QAAQ,CAAC4B,EAAT,CAAY,OAAZ,EAAsBC,QAAD,IAAc;AACjC,UAAIrD,KAAK,GAAGqD,QAAQ,CAACE,GAAT,EAAZ;AACA,UAAIc,QAAQ,GAAG,EAAf;;AACA,WAAK,IAAI3B,IAAT,IAAiB1C,KAAjB,EAAwB;AACtBqE,QAAAA,QAAQ,CAACvB,IAAT,CAAc;AACZwB,UAAAA,EAAE,EAAE5B,IADQ;AAEZC,UAAAA,KAAK,EAAE3C,KAAK,CAAC0C,IAAD,CAAL,CAAYC,KAFP;AAGZ5C,UAAAA,IAAI,EAAEC,KAAK,CAAC0C,IAAD,CAAL,CAAY3C,IAHN;AAIZ6C,UAAAA,KAAK,EAAE5C,KAAK,CAAC0C,IAAD,CAAL,CAAYE,KAJP;AAKZX,UAAAA,GAAG,EAAEjC,KAAK,CAAC0C,IAAD,CAAL,CAAYT;AALL,SAAd;AAOD;;AACD,WAAKb,QAAL,CAAc;AACZpB,QAAAA,KAAK,EAAEqE;AADK,OAAd;AAGD,KAfD,EAVkB,CA2BlB;;AACA,UAAMlB,QAAQ,GAAG/D,QAAQ,CAACqC,QAAT,GAAoBC,GAApB,CAAwB,QAAxB,CAAjB;AACAyB,IAAAA,QAAQ,CAACC,EAAT,CAAY,OAAZ,EAAsBC,QAAD,IAAc;AACjC,UAAIhD,MAAM,GAAGgD,QAAQ,CAACE,GAAT,EAAb;AACA,UAAIc,QAAQ,GAAG,EAAf;;AACA,WAAK,IAAIzB,KAAT,IAAkBvC,MAAlB,EAA0B;AACxBgE,QAAAA,QAAQ,CAACvB,IAAT,CAAc;AACZwB,UAAAA,EAAE,EAAE1B,KADQ;AAEZY,UAAAA,IAAI,EAAEnD,MAAM,CAACuC,KAAD,CAAN,CAAcY,IAFR;AAGZC,UAAAA,OAAO,EAAEpD,MAAM,CAACuC,KAAD,CAAN,CAAca,OAHX;AAIZK,UAAAA,KAAK,EAAEzD,MAAM,CAACuC,KAAD,CAAN,CAAckB;AAJT,SAAd;AAMD;;AACD,WAAK1C,QAAL,CAAc;AACZf,QAAAA,MAAM,EAAEgE;AADI,OAAd;AAGD,KAdD;AAgBD,GAhPyB,CAkP1B;;;AACAE,EAAAA,UAAU,CAACC,MAAD,EAAS;AACjB,UAAMC,OAAO,GAAGrF,QAAQ,CAACqC,QAAT,GAAoBC,GAApB,CAAyB,UAAS8C,MAAO,EAAzC,CAAhB;AACAC,IAAAA,OAAO,CAACC,MAAR;AACD;;AAGDC,EAAAA,WAAW,GAAG,CAEb,CAFU,CACT;AAGF;AACA;;;AACAC,EAAAA,kBAAkB,CAACxE,UAAD,EAAaF,SAAb,EAAwB;AAExC,QAAI6D,SAAS,GAAG,EAAhB,CAFwC,CAGxC;;AACA,UAAMZ,QAAQ,GAAG/D,QAAQ,CAACqC,QAAT,GAAoBC,GAApB,CAAwB,QAAxB,CAAjB;AACAyB,IAAAA,QAAQ,CAACC,EAAT,CAAY,OAAZ,EAAsBC,QAAD,IAAc;AACjCU,MAAAA,SAAS,GAAGV,QAAQ,CAACE,GAAT,EAAZ;;AACA,WAAK,IAAIX,KAAT,IAAkBmB,SAAlB,EAA6B;AAC3BvB,QAAAA,OAAO,CAACC,GAAR,CAAYsB,SAAS,CAACnB,KAAD,CAAT,CAAiBY,IAA7B;;AACA,YAAIO,SAAS,CAACnB,KAAD,CAAT,CAAiBY,IAAjB,IAAyBtD,SAA7B,EAAwC;AACtC,cAAI6D,SAAS,CAACnB,KAAD,CAAT,CAAiBkB,KAAjB,IAA0B1D,UAA9B,EAA0C;AACxC,gBAAIyE,KAAK,GAAGd,SAAS,CAACnB,KAAD,CAAT,CAAiBa,OAAjB,CAAyBqB,OAAzB,CAAiC1E,UAAjC,CAAZ;AACA2D,YAAAA,SAAS,CAACnB,KAAD,CAAT,CAAiBa,OAAjB,CAAyBsB,MAAzB,CAAgCF,KAAhC,EAAsC,CAAtC;AACD;AACF;AACF;AACF,KAXD;AAaA1B,IAAAA,QAAQ,CAACa,GAAT,CAAaD,SAAb;AACA,SAAK3C,QAAL,CAAc;AACZjB,MAAAA,aAAa,EAAE,EADH;AAEZC,MAAAA,UAAU,EAAE;AAFA,KAAd;AAKD,GAvRyB,CAyR1B;AACA;;;AACAU,EAAAA,UAAU,GAAE;AACV,QAAIkE,IAAI,GAAG,CAAC,KAAKpF,KAAL,CAAWK,QAAvB;AACA,SAAKmB,QAAL,CAAc;AACZnB,MAAAA,QAAQ,EAAE+E;AADE,KAAd;AAGD,GAhSyB,CAkS1B;;;AACAC,EAAAA,MAAM,GAAG;AACP;AAAA;AACE;AACA;AACA;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEG,KAAKrF,KAAL,CAAWK,QAAX,gBACC;AAAQ,QAAA,OAAO,EAAE,KAAKa,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,gBAGC;AAAQ,QAAA,OAAO,EAAE,KAAKA,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ,EAOG,KAAKlB,KAAL,CAAWG,IAAX,gBACC;AAAQ,QAAA,OAAO,EAAE,KAAKY,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,gBAGC;AAAQ,QAAA,OAAO,EAAE,KAAKD,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVJ,CADF,CADF,EAoBG,KAAKd,KAAL,CAAWG,IAAX,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,KAAKH,KAAL,CAAWK,QAAX;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,GAAG,EAAE,KAAKL,KAAL,CAAWG,IAAX,CAAgBmF,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,eAME;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAS,QAAA,SAAS,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAM,QAAA,QAAQ,EAAE,KAAKzE,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,aAAxB;AAAsC,QAAA,WAAW,EAAC,oCAAlD;AAAuF,QAAA,QAAQ,EAAE,KAAKF,YAAtG;AAAoH,QAAA,KAAK,EAAE,KAAKX,KAAL,CAAWU,WAAtI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,aAAxB;AAAsC,QAAA,WAAW,EAAC,qBAAlD;AAAwE,QAAA,QAAQ,EAAE,KAAKC,YAAvF;AAAqG,QAAA,KAAK,EAAE,KAAKX,KAAL,CAAWC,WAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,CADF,CADF,eASE;AAAS,QAAA,SAAS,EAAC,cAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKD,KAAL,CAAWI,KAAX,CAAiBmF,GAAjB,CAAsBzC,IAAD,IAAU;AAC9B,4BACE;AAAI,UAAA,GAAG,EAAEA,IAAI,CAAC4B,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAM,KAAKvD,IAAL,CAAU2B,IAAV,CAAN,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAeA,IAAI,CAAC3C,IAApB,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAiB2C,IAAI,CAACE,KAAtB,EACGF,IAAI,CAAC3C,IAAL,KAAc,KAAKH,KAAL,CAAWG,IAAX,CAAgB8C,WAA9B,IAA6CH,IAAI,CAAC3C,IAAL,KAAc,KAAKH,KAAL,CAAWG,IAAX,CAAgBqF,KAA3E,gBACC;AAAQ,UAAA,OAAO,EAAE,MAAM,KAAKb,UAAL,CAAgB7B,IAAI,CAAC4B,EAArB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADD,GACyE,IAF5E,CAHF,CADF;AAUD,OAXA,CADH,CADF,CADF,CATF,CANF,CAFA;AAAA;AAsCA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,GAAG,EAAE,KAAK1E,KAAL,CAAWG,IAAX,CAAgBmF,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,eAKE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAS,QAAA,SAAS,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAM,QAAA,QAAQ,EAAE,KAAKtE,cAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,WAAxB;AAAoC,QAAA,WAAW,EAAC,+BAAhD;AAAgF,QAAA,QAAQ,EAAE,KAAKL,YAA/F;AAA6G,QAAA,KAAK,EAAE,KAAKX,KAAL,CAAWM,SAA/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,CADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CALF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CARF,eAYE;AAAM,QAAA,QAAQ,EAAE,KAAKW,gBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,eAAxB;AAAwC,QAAA,WAAW,EAAC,mCAApD;AAAwF,QAAA,QAAQ,EAAE,KAAKN,YAAvG;AAAqH,QAAA,KAAK,EAAE,KAAKX,KAAL,CAAWO,aAAvI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,YAAxB;AAAqC,QAAA,WAAW,EAAC,+BAAjD;AAAiF,QAAA,QAAQ,EAAE,KAAKI,YAAhG;AAA8G,QAAA,KAAK,EAAE,KAAKX,KAAL,CAAWQ,UAAhI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,CAZF,CADF,eAmBE;AAAS,QAAA,SAAS,EAAC,cAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKR,KAAL,CAAWS,MAAX,CAAkB8E,GAAlB,CAAuBzC,IAAD,IAAU;AAC/B,YAAIA,IAAI,CAACe,OAAL,CAAaC,QAAb,CAAsB,KAAK9D,KAAL,CAAWG,IAAX,CAAgB8C,WAAtC,CAAJ,EAAyD;AACvD,8BACE;AAAI,YAAA,GAAG,EAAEH,IAAI,CAAC4B,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAK5B,IAAI,CAACc,IAAV,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAad,IAAI,CAACoB,KAAlB,CAFF,EAIIpB,IAAI,CAACe,OAAL,CAAa0B,GAAb,CAAkBE,MAAD,IAAY;AAC3B,gBAAI,KAAKzF,KAAL,CAAWG,IAAX,CAAgB8C,WAAhB,IAA+BH,IAAI,CAACoB,KAAxC,EAA+C;AAC7C,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAIuB,MAAJ,eACI;AAAQ,gBAAA,OAAO,EAAE,MAAM,KAAKT,kBAAL,CAAwBS,MAAxB,EAAgC3C,IAAI,CAACc,IAArC,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CAFF,CADF;AAQD,aATD,MASO;AACL,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAI6B,MAAJ,CADF,CADF;AAKD;AACA,WAjBH,CAJJ,CADF;AAwBF;AAAC,OA1BF,CADH,CAFF,CADF,CAnBF,CALF,CAzCJ,CADD,gBAyGC;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,CA7HJ;AAHF;AAuID;;AA3ayB;;AA6a5B,eAAe3F,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n//  Used to store posts, user info etc and to authenticate user login with google accounts\n//  https://firebase.google.com/\nimport firebase, { auth, provider } from './firebase.js';\n\n//  Library used to encrypt posts\n//  https://www.npmjs.com/package/crypto-js\nvar Crypto = require(\"crypto\");\nvar CryptoJS = require(\"crypto-js\");\n\n\nclass App extends Component {\n\n  constructor() {\n\n    super();\n\n    //state holds all global variables whose change should call for a refresh\n    this.state = {\n      currentItem: '',\n      username: '',\n      user: null,\n      items:[],\n      homepage: true,\n      groupName: '',\n      memberToGroup: '',\n      memberName: '',\n      groups: [],\n      postToGroup: '',\n    }\n\n    //binding all the methods to this\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.login = this.login.bind(this); \n    this.logout = this.logout.bind(this); \n    this.handleAddGroup = this.handleAddGroup.bind(this);\n    this.handleAddToGroup = this.handleAddToGroup.bind(this);\n    this.switchPage = this.switchPage.bind(this);\n    this.text = this.text.bind(this);\n    this.decrypt = this.decrypt.bind(this);\n  }\n\n  //Method that uses auth from google firebase to log people in with their gmail\n  login() {\n    auth.signInWithPopup(provider) \n      .then((result) => {\n        const user = result.user;\n        this.setState({\n          user\n        });\n      });\n  }\n\n  //Method that uses auth from google firebase to log people out\n  logout() {\n    auth.signOut()\n      .then(() => {\n        this.setState({\n          user: null\n        });\n      });\n  }\n\n  //Method to handle posting\n  // *** Encryption is done here ***\n  handleSubmit(e) {\n\n      //we need to prevent the default behavior of the form, \n      //which if we don’t will cause the page to refresh when you hit the submit button\n      e.preventDefault();\n\n      //We need to carve out a space in our Firebase database where we’d like to store all of the posts. \n      //We do this by calling the ref method and passing in the destination we’d like them to be stored (items).\n      const itemsRef = firebase.database().ref('items');\n\n      //  *** Encryption ***\n      // Here we generate a random key using today's date and a random string\n      // The Cyrpto library allows us to user SHA1 to generate a hash that we use as the key\n      var current_date = (new Date()).valueOf().toString();\n      var random = Math.random().toString();\n      var key = Crypto.createHash('sha1').update(current_date + random).digest('hex').toString();\n      \n      // Here we encrypt the post using AES which the Crypto Library provides\n      // AES is plain text encryption\n      var encryptedPost = CryptoJS.AES.encrypt(this.state.currentItem, key).toString();\n      console.log('encrypt: ');\n      console.log(encryptedPost);\n\n      //  Make item object to represent the post\n      //  The CipherText is stored, as is the group to which it is posted, the user who posted it and the key to decrypt it\n      const item = {\n        title: encryptedPost,\n        group: this.state.postToGroup,\n        user : this.state.user.displayName,\n        key: key,\n      }\n\n      //  Here we add the new item to the items on the firebase as well and reset the state values used to create this new item\n      //  The local items will be updated in components did mount\n      itemsRef.push(item);\n      this.setState({\n        currentItem: '',\n        postToGroup: '',\n      });\n  }\n\n   //  *** Decryption ***\n  //  This is the function where decrytion is preformed\n  decrypt(cipherText, key) {\n    var originalText = CryptoJS.AES.decrypt(cipherText, key).toString(CryptoJS.enc.Utf8);\n    return originalText;\n  }\n\n  //  This function checks if the current user is able to view the post as cipher text or not\n  text(item) {\n\n    //Getting Groups from db\n    let decrypt = false;  // This boolean tells us to decrypt or not\n    const groupRef = firebase.database().ref('groups');\n    groupRef.on('value', (snapshot) => {\n      let tempGroups = snapshot.val();\n      for (let group in tempGroups) {\n        if (tempGroups[group].name == item.group) {\n          if (tempGroups[group].members.includes(this.state.user.displayName)) {\n            decrypt=true;\n          } \n        }\n      }\n    });\n\n    if (decrypt) {\n      var hold = this.decrypt(item.title,item.key);\n      console.log('hold ' + hold);\n      return (hold);\n    } else {\n      console.log('item.title ' + item.title);\n      return(item.title);\n    } \n  }\n\n  //  This function handles adding a new group\n  //  This is very similar to handle submit as this is also called from a form \n  //  The differenece here is that we add a group as opposed to a post\n  handleAddGroup(e) {\n\n    e.preventDefault();\n\n    const groupsRef = firebase.database().ref('groups');\n    \n    var memberList = [this.state.user.displayName];\n\n    const group = {\n      name: this.state.groupName,\n      members: memberList,\n      admin: this.state.user.displayName\n    }\n\n    groupsRef.push(group);\n    this.setState({\n      groupName: '',\n    });\n    \n  }\n\n  //  This function handles adding a new member to a group\n  //  This is very similar to handle submit as this is also called from a form \n  //  The differenece here is that we add a member to a group \n  handleAddToGroup(e) {\n    \n    e.preventDefault();\n\n    let newGroups = '';\n    //  Getting Groups from db\n    const groupRef = firebase.database().ref('groups');\n    groupRef.on('value', (snapshot) => {\n      newGroups = snapshot.val();\n      for (let group in newGroups) {\n        console.log(newGroups[group].name);\n        //  We find the group that we want to add to\n        if (newGroups[group].name == this.state.memberToGroup) {\n          //  We add the member to our local temporary group\n          newGroups[group].members.push(this.state.memberName);\n        }\n      }\n    });\n\n    //  Here we set as opposed to post\n    groupRef.set(newGroups);\n\n    this.setState({\n      memberToGroup: '',\n      memberName: '',\n    });\n  \n  }\n\n  // This is a simple multipurpose function that sets a value in the state based on where it was called from\n  handleChange(e) {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n  }\n\n\n  //  We’ll attach this event listener inside of our componentDidMount\n  componentDidMount() {\n\n    //  Login stuff\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ user });\n      } \n    });\n    //  Getting items (posts) from db\n    const itemsRef = firebase.database().ref('items');\n    itemsRef.on('value', (snapshot) => {\n      let items = snapshot.val();\n      let newState = [];\n      for (let item in items) {\n        newState.push({\n          id: item,\n          title: items[item].title,\n          user: items[item].user,\n          group: items[item].group,\n          key: items[item].key\n        });\n      }\n      this.setState({\n        items: newState\n      });\n    });\n\n    //  Getting Groups from db\n    const groupRef = firebase.database().ref('groups');\n    groupRef.on('value', (snapshot) => {\n      let groups = snapshot.val();\n      let newState = [];\n      for (let group in groups) {\n        newState.push({\n          id: group,\n          name: groups[group].name,\n          members: groups[group].members,\n          admin: groups[group].admin\n        });\n      }\n      this.setState({\n        groups: newState\n      });\n    });\n\n  }\n\n  //  Function to remove a post\n  removeItem(itemId) {\n    const itemRef = firebase.database().ref(`/items/${itemId}`);\n    itemRef.remove();\n  }\n\n\n  removeGroup() {\n    //TODO\n  }\n\n  //   Remove a member from a group\n  //   This can only be done by a group admin\n  handleRemoveMember(memberName, groupName) {\n\n    let newGroups = '';\n    //  Getting Groups from db\n    const groupRef = firebase.database().ref('groups');\n    groupRef.on('value', (snapshot) => {\n      newGroups = snapshot.val();\n      for (let group in newGroups) {\n        console.log(newGroups[group].name);\n        if (newGroups[group].name == groupName) {\n          if (newGroups[group].admin != memberName) {\n            var index = newGroups[group].members.indexOf(memberName);\n            newGroups[group].members.splice(index,1);\n          } \n        }\n      }\n    });\n\n    groupRef.set(newGroups);\n    this.setState({\n      memberToGroup: '',\n      memberName: '',\n    });\n    \n  }\n\n  //  This just changes our global variable so that we can switch between \n  //  the homepage (for posting) and the groups page (to manage groups)\n  switchPage(){\n    let temp = !this.state.homepage;\n    this.setState({\n      homepage: temp,\n    });\n  }\n\n  //  This is the render that actually puts things on the screen \n  render() {\n    return (\n      //  This is the header part\n      //  So our banner, 'logo', logout and switch page buttons\n      <div className='app'>\n        <header>\n          <div className=\"wrapper\">\n            <h1>Social App</h1>\n            {this.state.homepage ?\n              <button onClick={this.switchPage}>Groups</button>                \n              :\n              <button onClick={this.switchPage}>Homepage</button>              \n            } \n            {this.state.user ?\n              <button onClick={this.logout}>Logout</button>                \n              :\n              <button onClick={this.login}>Log In</button>              \n            } \n          </div>\n        </header>\n\n        { /* This then makes up the body of the page */ }\n\n        { /* Here we make sure that the user is logged in */ }\n        {this.state.user ?    \n          <div>\n             {/* Then we display the contents based on what page we are on */ }\n            { this.state.homepage ?\n              // Here we are on the homepage\n              <div>\n                {/* Displays the users picture based on their gmail profile pic */ }\n                <div className='user-profile'>\n                  <img src={this.state.user.photoURL} />\n                </div>\n                {/* This takes care of writing posts */ }\n                <div className='container'>\n                  <section className='add-item'>\n                    <form onSubmit={this.handleSubmit}>\n                      <input type=\"text\" name=\"postToGroup\" placeholder=\"What group do you want to post to?\" onChange={this.handleChange} value={this.state.postToGroup} />\n                      <input type=\"text\" name=\"currentItem\" placeholder=\"What's on your mind\" onChange={this.handleChange} value={this.state.currentItem} />\n                      <button>Post</button>\n                    </form>\n                  </section>\n                  {/* This takes care of displaying posts */ }\n                  <section className='display-item'>\n                    <div className=\"wrapper\">\n                      <ul>\n                        {this.state.items.map((item) => {\n                          return (\n                            <li key={item.id}>\n                              <h3>{ this.text(item) }</h3>\n                              <p>posted by: {item.user}</p>\n                              <p> into group: {item.group}\n                                {item.user === this.state.user.displayName || item.user === this.state.user.email ?\n                                  <button onClick={() => this.removeItem(item.id)}>Remove Post</button> : null}\n                              </p>\n                            </li>\n                          )\n                        })}\n                      </ul>\n                    </div>\n                  </section>\n                </div>\n              </div>\n              :\n              //We are on the group page\n              <div>\n                <div className='user-profile'>\n                  <img src={this.state.user.photoURL} />\n                </div>\n                {/* This takes care of adding groups where you will be the admin */ }\n                <div className='container'>\n                  <section className='add-item'>\n                    <form onSubmit={this.handleAddGroup}>\n                      <input type=\"text\" name=\"groupName\" placeholder=\"What's your new group's name?\" onChange={this.handleChange} value={this.state.groupName} />\n                      <button>Add Group</button>\n                    </form>\n                    <section>\n                      <p></p>\n                    </section>\n                    <section>\n                      <p></p>\n                    </section>\n                    {/* This takes care of adding people to groups of which you are the admin */ }\n                    <form onSubmit={this.handleAddToGroup}>\n                      <input type=\"text\" name=\"memberToGroup\" placeholder=\"What group do you want to add to?\" onChange={this.handleChange} value={this.state.memberToGroup} /> \n                      <input type=\"text\" name=\"memberName\" placeholder=\"What's your new members name?\" onChange={this.handleChange} value={this.state.memberName} />\n                      <button>Add To Group</button>\n                    </form>\n                  </section>\n                  <section className='display-item'>\n                    <div className=\"wrapper\">\n                      {/* Displays the groups that you are a part of */ }\n                      <ul>\n                        {this.state.groups.map((item) => {\n                          if (item.members.includes(this.state.user.displayName) ) {\n                            return (\n                              <li key={item.id}>\n                                <h3>{item.name}</h3>\n                                <h3>Admin = {item.admin}</h3>\n                                {\n                                  item.members.map((member) => {\n                                    if (this.state.user.displayName == item.admin) {\n                                      return(\n                                        <div>\n                                          {/* If you are an admin then you have the option to remove people from that group */ }\n                                          <p>{member}\n                                              <button onClick={() => this.handleRemoveMember(member, item.name)}>Remove</button>\n                                          </p>\n                                        </div>\n                                      );\n                                    } else {\n                                      return(\n                                        <div>\n                                          <p>{member}</p>\n                                        </div>\n                                      );\n                                    }\n                                    })}\n                              </li>\n                        )}})}\n                      </ul>\n                    </div>\n                  </section>\n                </div>\n              </div>\n            }\n          </div>\n          :\n          <div className='wrapper'>\n            <p>You must be logged in.</p>\n          </div>\n        }\n        \n      </div>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}